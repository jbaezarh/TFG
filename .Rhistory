#   Medidas de rendimiento
lr_metrics <- pred |>
get_metrics()
lr_metrics
datos_numeric = datos |> select(where(is.numeric)) %>% st_drop_geometry()
pca <- princomp(datos_numeric,cor=T)
summary(pca)
lr_mod <-
logistic_reg(penalty = NULL, mixture = NULL) %>%
set_engine("glm")
lr_recipe <-
recipe(fire ~ ., data = training) %>%
step_pca(all_numeric_predictors(),num_comp = 15) %>%
step_date(date,features = c("dow","month")) %>%
# step_holiday(date, holidays = holidays) %>%
step_rm(date,cod_municipio,municipio) %>%
step_dummy(all_nominal_predictors()) %>%
step_zv(all_predictors()) %>%
step_normalize(all_predictors())
# 4º Creamos el workflow
lr_workflow <-
workflow() %>%
add_model(lr_mod) %>%
add_recipe(lr_recipe)
# 5º Ajustamos el modelo.
lr_res <-
lr_workflow %>%
fit(training)
lr_res %>% extract_fit_engine() %>% summary()
pred = cbind(predict(lr_res,new_data = validation(splits),type="prob"),
predict(lr_res,new_data = validation(splits),type="class"),
fire = validation(splits)$fire)
#   Medidas de rendimiento
lr_metrics <- pred |>
get_metrics()
lr_metrics
# the last model
lr_best # penalty = 0.0621
last_lr_mod <- logistic_reg(penalty = lr_best$penalty, mixture = 0) |>
set_engine("glmnet")
# the last workflow
last_lr_workflow <-
lr_workflow %>%
update_model(last_lr_mod)
# the last fit
set.seed(345)
last_lr_fit <-
last_lr_workflow %>%
last_fit(splits,
add_validation_set = T)
last_lr_fit
last_lr_fit %>%
collect_metrics()
last_lr_fit %>%
collect_predictions() %>%
get_metrics()
load("salidas_intermedias/datos_depurados_geom_2024-04-23.RData")
get_metrics <- function(pred) {
list(
res = tibble(
roc_auc = pred |> roc_auc(truth = fire, .pred_0) |> pull(.estimate),
accuracy = pred |> accuracy(truth = fire, .pred_class) |> pull(.estimate),
recall = pred |> sensitivity(truth = fire, .pred_class) |> pull(.estimate),
specificity = pred |> spec(truth = fire, .pred_class) |> pull(.estimate)),
conf_mat = pred |> conf_mat(truth = fire, .pred_class))
}
set.seed(123)
splits = initial_validation_time_split(datos,
prop=c(0.6,0.2))
training <- training(splits) %>%  st_drop_geometry()
val_set <- validation_set(splits) %>% st_drop_geometry()
test  <- testing(splits) %>% st_drop_geometry()
#2º definimos el modelo
lr_mod <-
logistic_reg(penalty = tune(), mixture = 1) %>%
set_engine("glmnet")
lr_recipe <-
recipe(fire ~ ., data = training) %>%
step_date(date,features = c("month")) %>%
# step_holiday(date, holidays = holidays) %>%
step_rm(date,cod_municipio,municipio,poblacion) %>%
step_dummy(all_nominal_predictors()) %>%
step_zv(all_predictors()) %>%
step_normalize(all_predictors())
# 4º Creamos el workflow
lr_workflow <-
workflow() %>%
add_model(lr_mod) %>%
add_recipe(lr_recipe)
# 5º Ajustamos el modelo.
# Create the grid of tuning
lr_reg_grid <- tibble(penalty = 10^seq(-4, -1, length.out = 30))
lr_res <-
lr_workflow %>%
tune_grid(val_set,
grid = lr_reg_grid,
control = control_grid(save_pred = TRUE),
metrics = metric_set(accuracy,roc_auc,recall,spec))
# Se muestran las medidas de rendimiento en función del parámetro de penalización
lr_plot <-
lr_res %>%
collect_metrics() %>%
# filter(.metric == "accuracy") %>%
ggplot(aes(x = penalty, y = mean,col=.metric)) +
geom_point() +
geom_line() +
ylab("Medidas de rendimiento") +
scale_x_log10(labels = scales::label_number())
lr_plot
lr_res |>
collect_metrics() |>
group_by(.metric)|>
summarise(max = max(mean),min=min(mean))
top_models <-
lr_res %>%
show_best(metric = "accuracy", n = 15) %>%
arrange(penalty)
# Se elige el que tiene una precisión más elevada
lr_best <-
lr_res %>%
select_best(metric="accuracy")
# 6º Se evalúa el modelo:
#   Curva ROC
lr_auc <-
lr_res %>%
collect_predictions(parameters = lr_best) %>%
roc_curve(fire, .pred_0) %>%
mutate(model = "Logistic Regression")
autoplot(lr_auc)
#   Medidas de rendimiento
lr_metrics <- lr_res |>
collect_predictions(parameters = lr_best) |>
get_metrics()
lr_metrics
#2º definimos el modelo
lr_mod <-
logistic_reg(penalty = tune(), mixture = 0) %>%
set_engine("glmnet")
lr_recipe <-
recipe(fire ~ ., data = training) %>%
step_date(date,features = c("month")) %>%
# step_holiday(date, holidays = holidays) %>%
step_rm(date,cod_municipio,municipio,poblacion) %>%
step_dummy(all_nominal_predictors()) %>%
step_zv(all_predictors()) %>%
step_normalize(all_predictors())
# 4º Creamos el workflow
lr_workflow <-
workflow() %>%
add_model(lr_mod) %>%
add_recipe(lr_recipe)
# 5º Ajustamos el modelo.
# Create the grid of tuning
lr_reg_grid <- tibble(penalty = 10^seq(-4, -1, length.out = 30))
lr_res <-
lr_workflow %>%
tune_grid(val_set,
grid = lr_reg_grid,
control = control_grid(save_pred = TRUE),
metrics = metric_set(accuracy,roc_auc,recall,spec))
# Se muestran las medidas de rendimiento en función del parámetro de penalización
lr_plot <-
lr_res %>%
collect_metrics() %>%
# filter(.metric == "accuracy") %>%
ggplot(aes(x = penalty, y = mean,col=.metric)) +
geom_point() +
geom_line() +
ylab("Medidas de rendimiento") +
scale_x_log10(labels = scales::label_number())
lr_plot
lr_res |>
collect_metrics() |>
group_by(.metric)|>
summarise(max = max(mean),min=min(mean))
top_models <-
lr_res %>%
show_best(metric = "accuracy", n = 15) %>%
arrange(penalty)
# Se elige el que tiene una precisión más elevada
lr_best <-
lr_res %>%
select_best(metric="accuracy")
# 6º Se evalúa el modelo:
#   Curva ROC
lr_auc <-
lr_res %>%
collect_predictions(parameters = lr_best) %>%
roc_curve(fire, .pred_0) %>%
mutate(model = "Logistic Regression")
autoplot(lr_auc)
#   Medidas de rendimiento
lr_metrics <- lr_res |>
collect_predictions(parameters = lr_best) |>
get_metrics()
lr_metrics
lr_recipe <-
recipe(fire ~ ., data = training) %>%
step_date(date,features = c("dow","month")) %>%
# step_holiday(date, holidays = holidays) %>%
step_rm(date,cod_municipio,municipio,poblacion) %>%
step_dummy(all_nominal_predictors()) %>%
step_zv(all_predictors()) %>%
step_normalize(all_predictors())
# 4º Creamos el workflow
lr_workflow <-
workflow() %>%
add_model(lr_mod) %>%
add_recipe(lr_recipe)
# 5º Ajustamos el modelo.
# Create the grid of tuning
lr_reg_grid <- tibble(penalty = 10^seq(-4, -1, length.out = 30))
lr_res <-
lr_workflow %>%
tune_grid(val_set,
grid = lr_reg_grid,
control = control_grid(save_pred = TRUE),
metrics = metric_set(accuracy,roc_auc,recall,spec))
# Se muestran las medidas de rendimiento en función del parámetro de penalización
lr_plot <-
lr_res %>%
collect_metrics() %>%
# filter(.metric == "accuracy") %>%
ggplot(aes(x = penalty, y = mean,col=.metric)) +
geom_point() +
geom_line() +
ylab("Medidas de rendimiento") +
scale_x_log10(labels = scales::label_number())
lr_plot
lr_res |>
collect_metrics() |>
group_by(.metric)|>
summarise(max = max(mean),min=min(mean))
top_models <-
lr_res %>%
show_best(metric = "accuracy", n = 15) %>%
arrange(penalty)
# Se elige el que tiene una precisión más elevada
lr_best <-
lr_res %>%
select_best(metric="accuracy")
# 6º Se evalúa el modelo:
#   Curva ROC
lr_auc <-
lr_res %>%
collect_predictions(parameters = lr_best) %>%
roc_curve(fire, .pred_0) %>%
mutate(model = "Logistic Regression")
autoplot(lr_auc)
#   Medidas de rendimiento
lr_metrics <- lr_res |>
collect_predictions(parameters = lr_best) |>
get_metrics()
lr_metrics
# the last model
lr_best # penalty = 0.0621
last_lr_mod <- logistic_reg(penalty = lr_best$penalty, mixture = 0) |>
set_engine("glmnet")
# the last workflow
last_lr_workflow <-
lr_workflow %>%
update_model(last_lr_mod)
# the last fit
set.seed(345)
last_lr_fit <-
last_lr_workflow %>%
last_fit(splits,
add_validation_set = T)
last_lr_fit
last_lr_fit %>%
collect_metrics()
last_lr_fit %>%
collect_predictions() %>%
get_metrics()
last_lr_fit %>%
collect_predictions() %>%
get_metrics()
# Cargamos las librerías
library(terra)
library(sf)
library(mapSpain)
library(tidyverse)
library(climate)
library(lubridate)
# CRS de referencia
pend <- rast("data_raw/topograficas/pendiente.tif")
crs_reference = crs(pend)
rm(pend)
# Poligono de Andalucia
Andalucia <- esp_get_ccaa(ccaa = "Andalucía")
andalucia_proj <- st_transform(Andalucia,crs_reference)
for (year in 2002:2022) {
incendios = rbind(incendios,
st_read(paste0("./data_raw/incendios_2000-2022/incendios_",year,".shp")) %>%
select(matches("(?i)^FECHA_INIC$|^fecha_inic$")))
}
incendios = NULL
for (year in 2002:2022) {
incendios = rbind(incendios,
st_read(paste0("./data_raw/incendios_2000-2022/incendios_",year,".shp")) %>%
select(matches("(?i)^FECHA_INIC$|^fecha_inic$")))
}
year=2022
incendios = rbind(incendios,
st_read(paste0("./data_raw/incendios_2000-2022/incendios_",year,".shp")) %>%
select(matches("(?i)^FECHA_INIC$|^fecha_inic$")))
st_read(paste0("./data_raw/incendios_2000-2022/incendios_",year,".shp")) %>%
select(matches("(?i)^FECHA_INIC$|^fecha_inic$"))
st_read(paste0("./data_raw/incendios_2000-2022/incendios_",year,".shp"))
incendios_2022 = st_read(paste0("./data_raw/incendios_2000-2022/incendios_",year,".shp"))
names(incendios_2022)
incendios_2022 = st_read(paste0("./data_raw/incendios_2000-2022/incendios_",year,".shp")) %>% select(matches("(?i)^FECHA_INIC$|^fecha_inic.$"))
incendios_2022
incendios = rbind(incendios,
st_read(paste0("./data_raw/incendios_2000-2022/incendios_",year,".shp")) %>%
select(matches("(?i)^FECHA_INIC$|^fecha_inic.$")))
incendios = rbind(incendios,
st_read(paste0("./data_raw/incendios_2000-2022/incendios_",year,".shp")) %>%
select(matches("(?i)^FECHA_INIC$|^fecha_inic.$")) %>%
rename("FECHA_INIC" = "(?i)^FECHA_INIC$|^fecha_inic.$"))
?rename
incendios = rbind(incendios,
st_read(paste0("./data_raw/incendios_2000-2022/incendios_",year,".shp")) %>%
select(matches("(?i)^FECHA_INIC$|^fecha_inic.$")) %>%
rename("FECHA_INIC" )
}
st_read(paste0("./data_raw/incendios_2000-2022/incendios_",year,".shp")) %>%
select(matches("(?i)^FECHA_INIC$|^fecha_inic.$")) %>%
rename("FECHA_INIC")
?select
incendios = rbind(incendios,
st_read(paste0("./data_raw/incendios_2000-2022/incendios_",year,".shp")) %>%
select("FECHA_INIC" = matches("(?i)^FECHA_INIC$|^fecha_inic.$")))
for (year in 2002:2022) {
incendios = rbind(incendios,
st_read(paste0("./data_raw/incendios_2000-2022/incendios_",year,".shp")) %>%
select("FECHA_INIC" = matches("(?i)^FECHA_INIC$|^fecha_inic.$")))
}
incendios = NULL
for (year in 2002:2022) {
incendios = rbind(incendios,
st_read(paste0("./data_raw/incendios_2000-2022/incendios_",year,".shp")) %>%
select("FECHA_INIC" = matches("(?i)^FECHA_INIC$|^fecha_inic.$")))
}
incendios %>% filter(year(FECHA_INIC<=2022),year(FECHA_INIC>=2002))
incendios %>% filter(year(FECHA_INIC)<=2022,year(FECHA_INIC)>=2002) %>% count()
incendios %>%
filter(!is.na(FECHA_INIC)) %>%
filter(year(FECHA_INIC)<=2022,year(FECHA_INIC)>=2002) %>%
count()
View(incendios)
incendios %>%
mutate(FECHA_INIC = ymd(FECHA_INIC),.keep="unused")
incendios %>%
mutate(FECHA_INIC = ymd(FECHA_INIC),.keep="unused") %>%
filter(!is.na(FECHA_INIC)) %>%
filter(year(FECHA_INIC)<=2022,year(FECHA_INIC)>=2002) %>%
count()
incendios %>%
mutate(FECHA_INIC = ymd(FECHA_INIC),.keep="unused") %>%
filter(!is.na(FECHA_INIC)) %>%
filter(year(FECHA_INIC)<=2022,year(FECHA_INIC)>=2002) %>%
count()
incendios %>%
mutate(FECHA_INIC = ymd(FECHA_INIC),.keep="unused") %>%
filter(!is.na(FECHA_INIC)) %>%
filter(year(FECHA_INIC)<=2022,year(FECHA_INIC)>=2002) %>%
count(month(FECHA_INIC))
incendios %>%
mutate(FECHA_INIC = ymd(FECHA_INIC),.keep="unused") %>%
filter(!is.na(FECHA_INIC)) %>%
filter(year(FECHA_INIC)<=2022,year(FECHA_INIC)>=2002) %>%
st_drop_geometry() %>%
count(month(FECHA_INIC))
incendios %>%
mutate(FECHA_INIC = ymd(FECHA_INIC),.keep="unused") %>%
filter(!is.na(FECHA_INIC)) %>%
filter(year(FECHA_INIC)<=2022,year(FECHA_INIC)>=2002) %>%
st_drop_geometry() %>%
count(month(FECHA_INIC))
incendios %>%
mutate(FECHA_INIC = ymd(FECHA_INIC),.keep="unused") %>%
filter(!is.na(FECHA_INIC)) %>%
filter(year(FECHA_INIC)<=2022,year(FECHA_INIC)>=2002) %>%
st_drop_geometry() %>%
count(month(FECHA_INIC))
incendios %>%
mutate(FECHA_INIC = ymd(FECHA_INIC),.keep="unused") %>%
filter(!is.na(FECHA_INIC)) %>%
filter(year(FECHA_INIC)<=2022,year(FECHA_INIC)>=2002) %>%
st_drop_geometry() %>%
mutate(MES = month(month(FECHA_INIC)))
incendios %>%
mutate(FECHA_INIC = ymd(FECHA_INIC),.keep="unused") %>%
filter(!is.na(FECHA_INIC)) %>%
filter(year(FECHA_INIC)<=2022,year(FECHA_INIC)>=2002) %>%
st_drop_geometry() %>%
mutate(MES = month(month(FECHA_INIC))) %>%
count(MES)
incendios_mes = incendios %>%
mutate(FECHA_INIC = ymd(FECHA_INIC),.keep="unused") %>%
filter(!is.na(FECHA_INIC)) %>%
filter(year(FECHA_INIC)<=2022,year(FECHA_INIC)>=2002) %>%
st_drop_geometry() %>%
mutate(MES = month(month(FECHA_INIC))) %>%
count(MES)
dates <- sample(2002:2002,1)
sample(2002:2002,1)
sample(2002:2022,1)
sample(seq(as.Date('2000/01/01'), as.Date('2022/12/31'), by="day"), n_out,replace = T)
sample(2002:2022,1)
sample(2002:2022,1)
sample(2002:2022,1)
sample(2002:2022,1)
sample(2002:2022,1)
prueba = sample(2002:2022,100)
prueba = sample(2002:2022,100,replace = T)
table(prueba)
prueba = sample(2002:2022,1000,replace = T)
table(prueba)
?sample
possible_dates = seq(as.Date('2000/01/01'), as.Date('2022/12/31'), by="day")
possible_dates
possible_dates = tibble (date = seq(as.Date('2000/01/01'), as.Date('2022/12/31'), by="day"))
View(incendios_mes)
possible_dates = tibble (date = seq(as.Date('2000/01/01'), as.Date('2022/12/31'), by="day")) %>%
mutate(MES = month(date)) %>%
left_join(incendios_mes,
join_by(MES))
possible_dates
View(possible_dates)
dates = sample(possible_dates, n_out,replace = T,prob = n)
n_out=1000
dates = sample(possible_dates, n_out,replace = T,prob = n)
n_out=1000
dates = sample(possible_dates$date, n_out,replace = T,prob = possible_dates$n)
dates
table(month(dates))
n_out=10000
dates = sample(possible_dates$date, n_out,replace = T,prob = possible_dates$n)
table(month(dates))
prop.table(month(dates))
proptable(month(dates))
prop.table
?prop.table
proptable(table(month(dates)))
prop.table(table(month(dates)))
as.table(incendios_mes)
?as.table
as.table(incendios_mes)
as.table(as.matrix(incendios_mes))
prop.table(table(month(incendios$dates)))
prop.table(table(month(incendios$date)))
prop.table(table(month(incendios$date)))
incendios_mes = incendios %>%
mutate(FECHA_INIC = ymd(FECHA_INIC),.keep="unused") %>%
filter(!is.na(FECHA_INIC)) %>%
filter(year(FECHA_INIC)<=2022,year(FECHA_INIC)>=2002) %>%
st_drop_geometry() %>%
mutate(MES = month(month(FECHA_INIC))) %>%
count(MES)
prop.table(table(month(dates)))
incendios %>%
mutate(FECHA_INIC = ymd(FECHA_INIC),.keep="unused") %>%
filter(!is.na(FECHA_INIC)) %>%
filter(year(FECHA_INIC)<=2022,year(FECHA_INIC)>=2002) %>%
st_drop_geometry() %>%
mutate(MES = month(month(FECHA_INIC))) %>%
select(MES) %>%
table() %>%
prop.table()
incendios = NULL
# Cargamos las librerías
library(terra)
library(sf)
library(mapSpain)
library(tidyverse)
library(climate)
library(lubridate)
# CRS de referencia
pend <- rast("data_raw/topograficas/pendiente.tif")
crs_reference = crs(pend)
rm(pend)
# Poligono de Andalucia
Andalucia <- esp_get_ccaa(ccaa = "Andalucía")
andalucia_proj <- st_transform(Andalucia,crs_reference)
area_monte <- andalucia_proj
n_in=10 # Número de puntos a muestrear dentro de cada poligono
n_out=1089*10 # Número de muestras negativas
set.seed(12345) # Fijamos una semilla
incendios = NULL
for (year in 2002:2022) {
incendios = rbind(incendios,
st_read(paste0("./data_raw/incendios_2000-2022/incendios_",year,".shp")) %>%
select("FECHA_INIC" = matches("(?i)^FECHA_INIC$|^fecha_inic.$")))
}
incendios_mes = incendios %>%
mutate(FECHA_INIC = ymd(FECHA_INIC),.keep="unused") %>%
filter(!is.na(FECHA_INIC)) %>%
filter(year(FECHA_INIC)<=2022,year(FECHA_INIC)>=2002) %>%
st_drop_geometry() %>%
mutate(MES = month(month(FECHA_INIC))) %>%
count(MES)
sample(2002:2022,replace = T)
possible_dates = tibble (date = seq(as.Date('2000/01/01'), as.Date('2022/12/31'), by="day")) %>%
mutate(MES = month(date)) %>%
left_join(incendios_mes,
join_by(MES))
dates = sample(possible_dates$date, n_out,replace = T,prob = possible_dates$n)
rm(incendios, possible_dates)
points_in = NULL
points_out = NULL
