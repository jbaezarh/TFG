models$last_fit[[1]]
models$last_fit[[1]] %>% collect_predictions()
models$last_fit[[1]] %>% collect_predictions() %>% get_metrics()
models = models %>% mutate(test_metrics = map(last_fit,
collect_predictions() %>%
get_metrics() %>%
extract2(1)), # Para extraer solo las medidas y no la matriz de confusión
test_roc = map(last_fit,
collect_predictions() %>%
roc_curve(fire, .pred_0))
)
?map
models = models %>% mutate(test_metrics = last_fit %>%  map(collect_predictions() %>%
get_metrics() %>%
extract2(1)), # Para extraer solo las medidas y no la matriz de confusión
test_roc = map(last_fit,
collect_predictions() %>%
roc_curve(fire, .pred_0))
)
models = models %>% mutate(test_metrics = map(last_fit,
~collect_predictions(.x) %>%
get_metrics() %>%
extract2(1)), # Para extraer solo las medidas y no la matriz de confusión
test_roc = map(last_fit,
collect_predictions() %>%
roc_curve(fire, .pred_0))
)
models = models %>% mutate(test_metrics = map(last_fit,
~collect_predictions(.x) %>%
get_metrics() %>%
extract2(1)), # Para extraer solo las medidas y no la matriz de confusión
test_roc = map(last_fit,
~collect_predictions(.x) %>%
roc_curve(fire, .pred_0))
)
test_metrics = models %>% select(model_name,test_metrics) %>% unnest(test_metrics)
test_metrics
# plot
test_metrics %>%
pivot_longer(cols = c(roc_auc, accuracy, recall, specificity, precision),
names_to = "metric") %>%
ggplot(aes(x = metric, y = value, group = model_name)) +
geom_line(aes(col = model_name),size=1) +
geom_point(aes(col = model_name),size=2.3) +
scale_color_viridis_d(option="turbo") +
geom_vline(xintercept=1:5, linetype="dotted") +
labs(col = "Modelo", title = "Métricas sobre test") +
theme_minimal() +
theme(axis.line.x = element_line(color="black", size = 1),
axis.line.y = element_line(color="black", size = 1))
models %>% select(model_name,test_roc) %>% unnest(test_roc) %>%
ggplot(aes(x = 1 - specificity, y = sensitivity, col = model_name)) +
geom_path(lwd = 1, alpha = 0.7) +
geom_abline(lty = 3) +
coord_equal() +
labs(color="Modelo")+
# scale_color_viridis_d(option = "turbo",name="Modelo") +
theme_minimal() +
theme(axis.line.x = element_line(color="black", size = 1),
axis.line.y = element_line(color="black", size = 1))+
ggtitle("Curva ROC en test")
# the last model
rf_best2 # mtry = 4
# the last model
rf_res2 = rfres2 %>% select_best(metric="accuracy") # mtry = 4
# the last model
rf_best_2 = rf_res2 %>% select_best(metric="accuracy") # mtry = 4
rf_best_2
last_rf_mod <-
rand_forest(mtry = rf_best2$mtry, min_n = rf_best1$min_n, trees = 1000) %>%
set_engine("ranger", num.threads = cores,importance="impurity") %>%
set_mode("classification")
# the last workflow
last_rf_workflow <-
rf_workflow %>%
update_model(last_rf_mod)
# 3º Ensamblar todo con workflow
rf_workflow2 <-
workflow() %>%
add_model(rf_mod2) %>%
add_recipe(rf_recipe)
rf_res1 <-
rf_workflow %>%
tune_grid(val_set,
grid = expand_grid(min_n = seq(1000,2500,100)),
control = control_grid(save_pred = TRUE),
metrics = metric_set(accuracy,roc_auc,recall,spec))
# 1º Construir el modelo
rf_mod1 <-
rand_forest(mtry = 4, min_n = tune(), trees = 1000) %>%
set_engine("ranger", num.threads = cores) %>%
set_mode("classification")
# 2º Construir la receta con el preprocesamiento
rf_recipe <-
recipe(fire ~ ., data = training) %>%
step_date(date,features = c("dow", "month")) %>%
# step_holiday(date) %>%
step_rm(date, cod_municipio, municipio)
# 3º Ensamblar todo con workflow
rf_workflow2 <-
workflow() %>%
add_model(rf_mod2) %>%
add_recipe(rf_recipe)
# 1º Se construye el modelo
rf_mod2 <-
rand_forest(mtry = tune(), min_n = rf_best1$min_n, trees = 1000) %>%
set_engine("ranger", num.threads = cores) %>%
set_mode("classification")
# 3º Ensamblar todo con workflow
rf_workflow2 <-
workflow() %>%
add_model(rf_mod2) %>%
add_recipe(rf_recipe)
# the last workflow
last_rf_workflow <-
rf_workflow2 %>%
update_model(last_rf_mod)
set.seed(345)
last_rf_fit <-
last_rf_workflow %>%
last_fit(splits,
add_validation_set = T)
# the last model
rf_best_2 = rf_res2 %>% select_best(metric="accuracy") # mtry = 4
last_rf_fit <-
last_rf_workflow %>%
last_fit(splits,
add_validation_set = T)
# the last model
rf_best2 = rf_res2 %>% select_best(metric="accuracy") # mtry = 4
last_rf_mod <-
rand_forest(mtry = rf_best2$mtry, min_n = rf_best1$min_n, trees = 1000) %>%
set_engine("ranger", num.threads = cores,importance="impurity") %>%
set_mode("classification")
# the last workflow
last_rf_workflow <-
rf_workflow2 %>%
update_model(last_rf_mod)
set.seed(345)
last_rf_fit <-
last_rf_workflow %>%
last_fit(splits,
add_validation_set = T)
library(vip)
last_rf_fit %>%
extract_fit_parsnip() %>%
vip(num_features = 20)
?vip
last_rf_fit %>%
extract_fit_parsnip() %>%
vip(num_features = 20,aesthetics = list(theme_minimal()))
vip(num_features = 20,aesthetics = list(fill="blue")
last_rf_fit %>%
last_rf_fit %>%
extract_fit_parsnip() %>%
vip(num_features = 20,aesthetics = list(fill="blue"))
last_rf_fit %>%
extract_fit_parsnip() %>%
vip(num_features = 20,aesthetics = list(fill="blue"))+theme_minimal()
last_rf_fit %>%
extract_fit_parsnip() %>%
vip(num_features = 20,aesthetics = list(fill="lightblue"))+theme_minimal()
last_rf_fit %>%
extract_fit_parsnip() %>%
vip(num_features = 20,aesthetics = list(fill="lightred"))+theme_minimal()
last_rf_fit %>%
extract_fit_parsnip() %>%
vip(num_features = 20,aesthetics = list(fill="lightblue"))+theme_minimal()
?vip
last_rf_fit %>%
extract_fit_parsnip() %>%
vip(num_features = 50,aesthetics = list(fill="lightblue")) +
theme_minimal()
# plot
test_metrics %>%
pivot_longer(cols = c(roc_auc, accuracy, recall, specificity, precision),
names_to = "metric") %>%
ggplot(aes(x = metric, y = value, group = model_name)) +
geom_line(aes(col = model_name),size=1) +
geom_point(aes(col = model_name),size=2.3) +
scale_color_viridis_d(option="turbo") +
geom_vline(xintercept=1:5, linetype="dotted") +
labs(col = "Modelo", title = "Métricas sobre test") +
theme_minimal() +
theme(axis.line.x = element_line(color="black", size = 1),
axis.line.y = element_line(color="black", size = 1))
models %>% select(model_name,test_roc) %>% unnest(test_roc) %>%
ggplot(aes(x = 1 - specificity, y = sensitivity, col = model_name)) +
geom_path(lwd = 1, alpha = 0.7) +
geom_abline(lty = 3) +
coord_equal() +
labs(color="Modelo")+
# scale_color_viridis_d(option = "turbo",name="Modelo") +
theme_minimal() +
theme(axis.line.x = element_line(color="black", size = 1),
axis.line.y = element_line(color="black", size = 1))+
ggtitle("Curva ROC en test")
models %>% select(model_name,roc) %>% unnest(roc) %>%
ggplot(aes(x = 1 - specificity, y = sensitivity, col = model_name)) +
geom_path(lwd = 1, alpha = 0.7) +
geom_abline(lty = 3) +
coord_equal() +
labs(color="Modelo")+
# scale_color_viridis_d(option = "turbo",name="Modelo") +
theme_minimal() +
theme(axis.line.x = element_line(color="black", size = 1),
axis.line.y = element_line(color="black", size = 1))+
ggtitle("Curva ROC en validación")
kable(metrics,digits=3)
library(knitr)
kable(test_metrics,digits=3)
kable(metrics,digits=3)
# plot
test_metrics %>%
pivot_longer(cols = c(roc_auc, accuracy, recall, specificity, precision),
names_to = "metric") %>%
ggplot(aes(x = metric, y = value, group = model_name)) +
geom_line(aes(col = model_name),size=1) +
geom_point(aes(col = model_name),size=2.3) +
scale_color_viridis_d(option="turbo") +
geom_vline(xintercept=1:5, linetype="dotted") +
labs(col = "Modelo", title = "Métricas sobre test") +
theme_minimal() +
theme(axis.line.x = element_line(color="black", size = 1),
axis.line.y = element_line(color="black", size = 1))
models %>% select(model_name,test_roc) %>% unnest(test_roc) %>%
ggplot(aes(x = 1 - specificity, y = sensitivity, col = model_name)) +
geom_path(lwd = 1, alpha = 0.7) +
geom_abline(lty = 3) +
coord_equal() +
labs(color="Modelo")+
# scale_color_viridis_d(option = "turbo",name="Modelo") +
theme_minimal() +
theme(axis.line.x = element_line(color="black", size = 1),
axis.line.y = element_line(color="black", size = 1))+
ggtitle("Curva ROC en test")
models %>% select(model_name,test_roc) %>% unnest(test_roc) %>%
ggplot(aes(x = 1 - specificity, y = sensitivity, col = model_name)) +
geom_path(lwd = 1, alpha = 0.7) +
geom_abline(lty = 3) +
coord_equal() +
scale_color_viridis_d(option="turbo") +
labs(color="Modelo")+
# scale_color_viridis_d(option = "turbo",name="Modelo") +
theme_minimal() +
theme(axis.line.x = element_line(color="black", size = 1),
axis.line.y = element_line(color="black", size = 1))+
ggtitle("Curva ROC en test")
# plot
test_metrics %>%
pivot_longer(cols = c(roc_auc, accuracy, recall, specificity, precision),
names_to = "metric") %>%
ggplot(aes(x = metric, y = value, group = model_name)) +
geom_line(aes(col = model_name),size=1) +
geom_point(aes(col = model_name),size=2.3) +
scale_color_viridis_d(option="turbo") +
geom_vline(xintercept=1:5, linetype="dotted") +
labs(col = "Modelo", title = "Métricas sobre test") +
theme_minimal() +
theme(axis.line.x = element_line(color="black", size = 1),
axis.line.y = element_line(color="black", size = 1))
models %>% select(model_name,test_roc) %>% unnest(test_roc) %>%
ggplot(aes(x = 1 - specificity, y = sensitivity, col = model_name)) +
geom_path(lwd = 1, alpha = 0.7) +
geom_abline(lty = 3) +
coord_equal() +
scale_color_viridis_d(option="turbo") +
labs(color="Modelo")+
# scale_color_viridis_d(option = "turbo",name="Modelo") +
theme_minimal() +
theme(axis.line.x = element_line(color="black", size = 1),
axis.line.y = element_line(color="black", size = 1))+
ggtitle("Curva ROC en test")
models %>% select(model_name,roc) %>% unnest(roc) %>%
ggplot(aes(x = 1 - specificity, y = sensitivity, col = model_name)) +
geom_path(lwd = 1, alpha = 0.7) +
geom_abline(lty = 3) +
coord_equal() +
scale_color_viridis_d(option="turbo") +
labs(color="Modelo")+
# scale_color_viridis_d(option = "turbo",name="Modelo") +
theme_minimal() +
theme(axis.line.x = element_line(color="black", size = 1),
axis.line.y = element_line(color="black", size = 1))+
ggtitle("Curva ROC en validación")
kable(test_metrics,digits=3)
load("salidas_intermedias/all_models.RData")
models = models %>% mutate(best_tuning = map(models_tune,function(x) select_best(x,metric = "accuracy")),
best_metrics = map2(models_tune,
best_tuning,
~ collect_predictions(.x,parameters = .y) %>%
get_metrics() %>%
extract2(1)), # Para extraer solo las medidas y no la matriz de confusión
roc = map2(models_tune,
best_tuning,
~ collect_predictions(.x,parameters = .y) %>%
roc_curve(fire, .pred_0))
)
metrics = models %>% select(model_name,best_metrics) %>% unnest(best_metrics)
metrics
# curva roc
metrics %>%
pivot_longer(cols = c(roc_auc, accuracy, recall, specificity, precision),
names_to = "metric") %>%
ggplot(aes(x = metric, y = value, group = model_name)) +
geom_line(aes(col = model_name),size=1) +
geom_point(aes(col = model_name),size=2.3) +
scale_color_viridis_d(option="turbo") +
geom_vline(xintercept=1:5, linetype="dotted") +
labs(col = "Modelo", title = "Métricas sobre validación") +
theme_minimal() +
theme(axis.line.x = element_line(color="black", size = 1),
axis.line.y = element_line(color="black", size = 1))
# plot medidas
models %>% select(model_name,roc) %>% unnest(roc) %>%
ggplot(aes(x = 1 - specificity, y = sensitivity, col = model_name)) +
geom_path(lwd = 1, alpha = 0.7) +
geom_abline(lty = 3) +
coord_equal() +
scale_color_viridis_d(option="turbo") +
labs(color="Modelo")+
# scale_color_viridis_d(option = "turbo",name="Modelo") +
theme_minimal() +
theme(axis.line.x = element_line(color="black", size = 1),
axis.line.y = element_line(color="black", size = 1))+
ggtitle("Curva ROC en validación")
cores = 8
set.seed(345)
models <- models %>% mutate(final_workflow = map2(models_workflow,best_tuning,finalize_workflow),
last_fit = map(final_workflow,function(x) last_fit(x,splits,add_validation_set=T)))
save(models, file="salidas_intermedias/all_models_test.RData")
models = models %>% mutate(test_metrics = map(last_fit,
~collect_predictions(.x) %>%
get_metrics() %>%
extract2(1)), # Para extraer solo las medidas
test_roc = map(last_fit,
~collect_predictions(.x) %>%
roc_curve(fire, .pred_0))
)
save(models, file="salidas_intermedias/all_models_test.RData")
test_metrics = models %>% select(model_name,test_metrics) %>% unnest(test_metrics)
test_metrics
# plot
test_metrics %>%
pivot_longer(cols = c(roc_auc, accuracy, recall, specificity, precision),
names_to = "metric") %>%
ggplot(aes(x = metric, y = value, group = model_name)) +
geom_line(aes(col = model_name),size=1) +
geom_point(aes(col = model_name),size=2.3) +
scale_color_viridis_d(option="turbo") +
geom_vline(xintercept=1:5, linetype="dotted") +
labs(col = "Modelo", title = "Métricas sobre test") +
theme_minimal() +
theme(axis.line.x = element_line(color="black", size = 1),
axis.line.y = element_line(color="black", size = 1))
models %>% select(model_name,test_roc) %>% unnest(test_roc) %>%
ggplot(aes(x = 1 - specificity, y = sensitivity, col = model_name)) +
geom_path(lwd = 1, alpha = 0.7) +
geom_abline(lty = 3) +
coord_equal() +
scale_color_viridis_d(option="turbo") +
labs(color="Modelo")+
# scale_color_viridis_d(option = "turbo",name="Modelo") +
theme_minimal() +
theme(axis.line.x = element_line(color="black", size = 1),
axis.line.y = element_line(color="black", size = 1))+
ggtitle("Curva ROC en test")
library(knitr)
kable(test_metrics,digits=3)
# plot
test_metrics %>%
pivot_longer(cols = c(roc_auc, accuracy, recall, specificity, precision),
names_to = "metric") %>%
ggplot(aes(x = metric, y = value, group = model_name)) +
geom_line(aes(col = model_name),size=1) +
geom_point(aes(col = model_name),size=2.3) +
scale_color_viridis_d(option="turbo") +
geom_vline(xintercept=1:5, linetype="dotted") +
labs(col = "Modelo", title = "Métricas sobre test") +
theme_minimal() +
theme(axis.line.x = element_line(color="black", size = 1),
axis.line.y = element_line(color="black", size = 1))
models %>% select(model_name,test_roc) %>% unnest(test_roc) %>%
ggplot(aes(x = 1 - specificity, y = sensitivity, col = model_name)) +
geom_path(lwd = 1, alpha = 0.7) +
geom_abline(lty = 3) +
coord_equal() +
scale_color_viridis_d(option="turbo") +
labs(color="Modelo")+
# scale_color_viridis_d(option = "turbo",name="Modelo") +
theme_minimal() +
theme(axis.line.x = element_line(color="black", size = 1),
axis.line.y = element_line(color="black", size = 1))+
ggtitle("Curva ROC en test")
kable(test_metrics,digits=3)
test
validation
validation_set
val_set
validation(val_set)
validation(splits)
str(training)
validation(splits) %>% str()
models %>% filter(model_name=="lr")
models %>% pluck(model_name=="lr",final_workflow)
models %>% pluck(final_workflow,lr)
?plucl
?pluck7
?pluck
models %>% filter(model_name=="lr") %>% extract(last_fit)
models %>% filter(model_name=="lr") %>% pull(last_fit)
models %>% filter(model_name=="lr") %>% pull(last_fit) %>% extract_fit_engine()
models %>% filter(model_name=="lr") %>% extract("last_fit") #%>% extract_fit_engine()
models %>% filter(model_name=="lr") %>% extract("last_fit") %>% extract_fit_engine()
models %>%
filter(model_name=="lr") %>%
extract("last_fit") %>%
extract_fit_parsnip()
models %>%
filter(model_name=="lr") %>%
extract("last_fit") %>%
coef()
models %>%
filter(model_name=="lr") %>%
extract("last_fit") %>%
pull_workflow_fit() %>%
tidy()
models %>%
filter(model_name=="lr") %>%
last_fit(splits,add_validation = T)
models %>%
filter(model_name=="lr") %>%
extract("last_workflow") %>%
last_fit(splits,add_validation = T)
models %>%
filter(model_name=="lr") %>%
extract("final_workflow") %>%
last_fit(splits,add_validation = T)
models %>%
filter(model_name=="lr") %>%
extract("final_workflow") %>%
models %>%
filter(model_name=="lr") %>%
extract("final_workflow")
models %>%
filter(model_name=="lr") %>%
extract("final_workflow") %>%
last_fit(splits,add_validation = T)
models %>%
filter(model_name=="lr") %>%
extract("final_workflow") %>%
~last_fit(.,splits,add_validation = T)
models %>%
filter(model_name=="lr") %>%
extract("final_workflow") %>%
~last_fit(.,splits,add_validation = T)
models %>%
filter(model_name=="lr") %>%
extract("final_workflow") %>%
~last_fit(.x,splits,add_validation = T)
models %>%
filter(model_name=="lr") %>%
extract("final_workflow") %>%
function(x) last_fit(x,splits,add_validation = T)
?fit
models %>%
filter(model_name=="lr") %>%
extract("final_workflow") %>%
fit(train) %>%
extract_fit_parsnip()
models %>%
filter(model_name=="lr") %>%
extract("final_workflow") %>%
fit(train)
models %>%
filter(model_name=="lr") %>%
pull(final_workflow)
models %>%
filter(model_name=="lr") %>%
pull(final_workflow) %>%
fit(train) %>%
models %>%
filter(model_name=="lr") %>%
pull(final_workflow) %>%
fit(train) %>%
extract_fit_parsnip()
models %>%
filter(model_name=="lr") %>%
pull(final_workflow) %>%
fit(training) %>%
extract_fit_parsnip()
models %>%
filter(model_name=="lr") %>%
pull(final_workflow)
last_lr_workflow = models %>%
filter(model_name=="lr") %>%
pull(final_workflow)
models7
models
models %>% filter(model_name=="lr") %>% select(final_workflow) %>% unnest()
models %>% filter(model_name=="lr") %>% select(final_workflow)
models %>% filter(model_name=="lr") %>% select(final_workflow) %>% .[[1]]
models %>% filter(model_name=="lr") %>% select(final_workflow) %>% .[[1]] %>% fit(training) %>% extract_fit_parsnip()
models %>% filter(model_name=="lr") %>% select(final_workflow) %>% .[[1]] %>% fit(training)
a = models %>% filter(model_name=="lr") %>% select(final_workflow) %>% .[[1]]
a[[1]]
a = a[[1]]
a %>% fit(training) %>% extract_fit_parsnip()
a %>% fit(training) %>% extract_fit_parsnip() %>% tidy()
a %>% fit(training) %>% extract_fit_parsnip() %>% tidy() %>% print(n=100)
?`fit,onlearn-method`
?fit
