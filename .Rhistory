filter(!is.na(uso_suelo))
# Chunk 17
summary(dataset$NDVI)
summary(datos$NDVI)
plot(st_geometry(andalucia_proj),reset=F)
dataset |> filter(is.na(NDVI)) |> st_geometry() |> plot(pch=16,col="red",add=T)
# Chunk 18
NDVI_mes = datos |>
st_drop_geometry() |>
mutate(mes = month(date),
año = year(date)) |>
group_by(año,mes) |>
summarise(NDVI_mes = mean(na.omit(NDVI))) |>
ungroup() |>
mutate(date = dmy(paste(01,mes,año,sep="/")))
NDVI_mes |>
ggplot(aes(x=date,y=NDVI_mes)) +
geom_line()+
scale_x_date(date_breaks = "6 month",date_labels = "%y%b")+
theme(axis.text.x = element_text(angle = 90))
# 2008 tiene un NDVI especialmente bajo, puede deberse a numerosos factores:
#   - Que efectivamente sea un año especialmente seco
#   - Las características de la muestra seleccionada ese año
#   - Errores de medición
#   - ...
# Chunk 19
# La siguiente función lee el archivo con el NDVI corresponfiente a un mes y a un año dados (si está disponible)
read_NDVI = function(MM,YYYY) {
MM = str_pad(as.character(MM),2,"left",pad = "0")
YY = substr(as.character(YYYY),3,4)
if (as.numeric(YY)<=06) {
ruta <- paste0("data_raw/vegetacion/",YYYY,"TERMODMEDMNDVI/InfGeografica/InfRaster/TIFF/TERMOD_",YY,MM,"01_h17v05_medmndvi.tif")
} else if (as.numeric(YY)<=11) {
ruta <- paste0("data_raw/vegetacion/",YYYY,"TERMODMEDMNDVI/InfGeografica/InfRaster/TIF/TERMOD_",YY,MM,"01_h17v05_medmndvi.tif")
} else if (as.numeric(YY)<=21){
ruta <- paste0("data_raw/vegetacion/",YYYY,"TERMODMEDMNDVI/InfGeografica/InfRaster/TIFF/termod_",YY,MM,"01_h17v05_medmndvi.tif")
}else {
ruta <- paste0("data_raw/vegetacion/",YYYY,"TERMODMEDMNDVI/InfGeografica/InfRaster/COG/termod_",YY,MM,"01_h17v05_medmndvi_COG.tif")
}
if (file.exists(ruta)) {
NDVI = rast(ruta)
} else
NDVI = NA
return(NDVI)
}
# Los meses para los cuales no está disponible el archivo de NDVI:
year_month_missing_NDVI = c(
"2003-01",
"2003-04",
"2017-02",
"2018-11",
"2020-11",
"2021-12",
"2022-03",
"2022-12")
# Para cada observación para la que no está disponible el NDVI (porque la información de ese mes no está disponible), se obtiene el correspondiente al mismo mes del año anterior, si este está disponible, si no, el del año posterior:
missing_NDVI = datos |>
filter(is.na(NDVI)) |>
mutate(year = year(date),month = month(date)) |>
group_by(year,month) |>
filter(paste(year,str_pad(as.character(month),2,"left",pad = "0"),sep="-") %in%   year_month_missing_NDVI) |>  # Se filtra porque también hay observaciones que tienen NA en el NDVI no porque no exista el archivo, si no lo mismo que en ocasiones anteriores, porques discrepancias entre los límites de los polígonos
nest() |>
mutate(NDVI_rast = map2(month,year-1,read_NDVI), # Se lee primero el del año anterior
NDVI_rast = ifelse(is.na(unlist(NDVI_rast)),map2(month,year+1,read_NDVI),NDVI_rast), # Si no está disponible, se toma el del año posterior
NDVI_nuevo = map2(NDVI_rast,data,~terra::extract(.x,.y)[,2])) |>
select(-NDVI_rast) |>
unnest(c(data,NDVI_nuevo)) |>
mutate(NDVI = NDVI_nuevo,.keep="unused")
ind_modificados = is.na(datos$NDVI) & (paste(year(datos$date),str_pad(as.character(month(datos$date)),2,"left",pad = "0"),sep="-") %in% year_month_missing_NDVI) # Los elementos que han sido modificados
# Se asignan los valores imputados del NDVI:
datos[ind_modificados,]$NDVI = missing_NDVI$NDVI
# Chunk 20
datos |> st_drop_geometry() |> filter(is.na(NDVI)) |> count() # 13
plot(st_geometry(andalucia_proj),reset=F)
datos |> filter(is.na(NDVI)) |> st_geometry() |> plot(pch=16,col="red",add=T)
# Chunk 21
datos %<>% filter(!is.na(NDVI))
datos %>% names()
datos %>% rename("dist_ferrocarril" = "dist_ferocarril")
datos %<>% rename("dist_ferrocarril" = "dist_ferocarril")
save(datos, file = paste0("salidas_intermedias/datos_strat_depurados_geom_",Sys.Date(),".RData"))
library(tidyverse)
library(skimr)
library(sf)
library(corrplot)
library(GGally) # Coordenadas paralelas
library(ggpubr)
# load("salidas_intermedias/datos_depurados_geom_2024-04-23.RData")
# load("salidas_intermedias/datos_depurados_geom_2024-04-26.RData")
load("salidas_intermedias/datos_strat_depurados_geom_2024-04-27.RData")
View(datos)
datos %>%  st_drop_geometry %>% skim()
datos %>%
st_drop_geometry() %>%
# filter(fire==1) %>%
count(month(date,label=T),fire) %>%
rename("mes" = "month(date, label = T)") %>%
ggplot(aes(x = mes,y = n,fill=fire)) +
geom_col(position="dodge",alpha=0.8)
datos %>%
st_drop_geometry() %>%
# filter(fire==1) %>%
count(month(date,label=T),fire) %>%
rename("mes" = "month(date, label = T)") %>%
ggplot(aes(x = mes,y = n,fill=fire)) +
geom_col(position="dodge",alpha=0.8) +
theme(axis.text.x = element_text(angle = 90))
datos %>%
st_drop_geometry() %>%
# filter(fire==1) %>%
count(year(date),fire) %>%
rename("año" = "year(date)") %>%
ggplot(aes(x = año,y = n,fill=fire)) +
geom_col(position="dodge",alpha=0.8) +
scale_x_continuous(breaks=2002:2022) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
geom_smooth(se=F)
scale_color_manual(values=c("darkred","darkblue")
datos %>%
st_drop_geometry() %>%
# filter(fire==1) %>%
count(year(date),fire) %>%
rename("año" = "year(date)") %>%
ggplot(aes(x = año,y = n,fill=fire)) +
geom_col(position="dodge",alpha=0.8) +
scale_x_continuous(breaks=2002:2022) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
geom_smooth(se=F) +
scale_color_manual(values=c("darkred","darkblue"))
datos %>%
st_drop_geometry() %>%
# filter(fire==1) %>%
count(year(date),fire) %>%
rename("año" = "year(date)") %>%
ggplot(aes(x = año,y = n,fill=fire)) +
geom_col(position="dodge",alpha=0.8) +
scale_x_continuous(breaks=2002:2022) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
geom_smooth(se=F,aes(color=fire)) +
scale_color_manual(values=c("darkred","darkblue"))
datos %>%
st_drop_geometry() %>%
# filter(fire==1) %>%
count(weekdays(date),fire) %>%
rename("dia" = "weekdays(date)") %>%
ggplot(aes(x = dia,y = n,fill=fire)) +
geom_col(position="dodge",alpha=0.8) +
scale_x_discrete(limits=c("lunes", "martes", "miércoles", "jueves", "viernes", "sábado", "domingo")) +
theme(axis.text.x = element_text(angle = 45, vjust = 0.5, hjust=0.5)) +
geom_smooth(se=F)
library(mapSpain)
and <- esp_get_ccaa(ccaa = "Andalucía") %>% st_transform(st_crs(datos))
prov <- esp_get_prov() %>% filter(nuts2.name=="Andalucía") %>% st_transform(st_crs(datos))
# Casos positivos
g1 = ggplot(data = prov) +
geom_sf() +
geom_sf(data = datos %>% filter(fire==1),size = 1, alpha = 0.4,col="red")+
ggtitle("Distribución espacial de casos positivos")
# Casos negativos
g0 = ggplot(data = prov) +
geom_sf() +
geom_sf(data = datos %>% filter(fire==0),size = 1, alpha = 0.4,col="blue") +
ggtitle("Distribución espacial de casos negativos")
ggarrange(g1,g0,nrow=2)
ggplot(data = prov) +
geom_sf() +
geom_sf(data = datos, aes(color=T2M),size = 1.2, alpha = 0.6) +
scale_color_gradientn(colours = rainbow(5,rev=T)) +
# scale_color_gradient(low="blue", high="red")+
ggtitle("Distribución espacial de T2M")
datos %>%
st_drop_geometry() %>%
group_by(month(date,label=T),fire) %>%
summarize(AVG_T2M = mean(T2M),
Mes = `month(date, label = T)`) %>%
ggplot(aes(x=Mes,y=AVG_T2M,fill=fire)) +
geom_col(position="dodge",alpha=0.8)
datos %>%
st_drop_geometry() %>%
group_by(month(date,label=T),fire) %>%
summarize(AVG_T2M = mean(T2M),
Mes = `month(date, label = T)`) %>%
ggplot(aes(x=Mes,y=AVG_T2M,fill=fire)) +
geom_col(position="dodge",alpha=0.8) +
theme(axis.text.x = element_text(angle = 45, vjust = 0.5, hjust=0.5))
ggplot(data = prov) +
geom_sf() +
geom_sf(data = datos, aes(color=RH2M),size = 1.2, alpha = 0.6) +
scale_color_gradientn(colours = rainbow(5,rev=F)) +
# scale_color_gradient(low="blue", high="red")+
ggtitle("Distribución espacial de RH2M")
datos %>%
st_drop_geometry() %>%
group_by(month(date,label=T),fire) %>%
summarize(AVG_RH2M = mean(RH2M),
Mes = `month(date, label = T)`) %>%
ggplot(aes(x=Mes,y=AVG_RH2M,fill=fire)) +
geom_col(position="dodge",alpha=0.8) +
theme(axis.text.x = element_text(angle = 45, vjust = 0.5, hjust=0.5))
ggarrange(g0,g1)
g0 = ggplot(data = prov) +
geom_sf() +
geom_sf(data = datos, aes(color=T2M),size = 1.2, alpha = 0.6) +
scale_color_gradientn(colours = rainbow(5,rev=T)) +
# scale_color_gradient(low="blue", high="red")+
ggtitle("Distribución espacial de T2M")
g1 = datos %>%
st_drop_geometry() %>%
group_by(month(date,label=T),fire) %>%
summarize(AVG_T2M = mean(T2M),
Mes = `month(date, label = T)`) %>%
ggplot(aes(x=Mes,y=AVG_T2M,fill=fire)) +
geom_col(position="dodge",alpha=0.8) +
theme(axis.text.x = element_text(angle = 45, vjust = 0.5, hjust=0.5))
ggarrange(g0,g1,ncol=2)
ggplot(data = prov) +
geom_sf() +
geom_sf(data = datos, aes(color=GWETTOP),size = 1.2, alpha = 0.6) +
scale_color_gradientn(colours = rainbow(5,rev=F)) +
# scale_color_gradient(low="blue", high="red")+
ggtitle("Distribución espacial de GWETTOP")
datos %>%
st_drop_geometry() %>%
group_by(month(date,label=T),fire) %>%
summarize(AVG_GWETTOP = mean(GWETTOP),
Mes = `month(date, label = T)`) %>%
ggplot(aes(x=Mes,y=AVG_GWETTOP,fill=fire)) +
geom_col(position="dodge",alpha=0.8)
ggplot(data = prov) +
geom_sf() +
geom_sf(data = datos, aes(color=T2M),size = 1.2, alpha = 0.6) +
scale_color_gradientn(colours = rainbow(5,rev=T)) +
# scale_color_gradient(low="blue", high="red")+
ggtitle("Distribución espacial de T2M")
datos %>%
st_drop_geometry() %>%
group_by(month(date,label=T),fire) %>%
summarize(AVG_T2M = mean(T2M),
Mes = `month(date, label = T)`) %>%
ggplot(aes(x=Mes,y=AVG_T2M,fill=fire)) +
geom_col(position="dodge",alpha=0.8) +
theme(axis.text.x = element_text(angle = 45, vjust = 0.5, hjust=0.5))
datos %>%
st_drop_geometry() %>%
group_by(month(date,label=T),fire) %>%
summarize(AVG_T2M = mean(T2M),
Mes = `month(date, label = T)`) %>%
ggplot(aes(x=Mes,y=AVG_T2M,fill=fire)) +
geom_col(position="dodge",alpha=0.8) +
theme(axis.text.x = element_text(angle = 45, vjust = 0.5, hjust=0.5))
ggplot(data = prov) +
geom_sf() +
geom_sf(data = datos, aes(color=RH2M),size = 1.2, alpha = 0.6) +
scale_color_gradientn(colours = rainbow(5,rev=F)) +
# scale_color_gradient(low="blue", high="red")+
ggtitle("Distribución espacial de RH2M")
datos %>%
st_drop_geometry() %>%
group_by(month(date,label=T),fire) %>%
summarize(AVG_RH2M = mean(RH2M),
Mes = `month(date, label = T)`) %>%
ggplot(aes(x=Mes,y=AVG_RH2M,fill=fire)) +
geom_col(position="dodge",alpha=0.8) +
theme(axis.text.x = element_text(angle = 45, vjust = 0.5, hjust=0.5))
ggplot(data = prov) +
geom_sf() +
geom_sf(data = datos, aes(color=GWETTOP),size = 1.2, alpha = 0.6) +
scale_color_gradientn(colours = rainbow(5,rev=F)) +
# scale_color_gradient(low="blue", high="red")+
ggtitle("Distribución espacial de GWETTOP")
datos %>%
st_drop_geometry() %>%
group_by(month(date,label=T),fire) %>%
summarize(AVG_GWETTOP = mean(GWETTOP),
Mes = `month(date, label = T)`) %>%
ggplot(aes(x=Mes,y=AVG_GWETTOP,fill=fire)) +
geom_col(position="dodge",alpha=0.8)
ggplot(data = prov) +
geom_sf() +
geom_sf(data = datos, aes(color=WS10M),size = 1.2, alpha = 0.6) +
scale_color_gradientn(colours = rainbow(5,rev=T)) +
# scale_color_gradient(low="blue", high="red")+
ggtitle("Distribución espacial de WS10M")
datos %>%
st_drop_geometry() %>%
group_by(month(date,label=T),fire) %>%
summarize(AVG_WS10M = mean(WS10M),
Mes = `month(date, label = T)`) %>%
ggplot(aes(x=Mes,y=AVG_WS10M,fill=fire)) +
geom_col(position="dodge",alpha=0.8)
mode <- function(x) { names(which.max(table(x))) }
datos_mode_WD10M = datos %>%
st_drop_geometry() %>%
group_by(month(date,label=T),fire) %>%
summarize(mode_WD10M = mode(WD10M))
tibble(mes = datos_mode_WD10M[datos_mode_WD10M$fire==1,1],
fire1 = datos_mode_WD10M[datos_mode_WD10M$fire==1,3],
fire0 = datos_mode_WD10M[datos_mode_WD10M$fire==0,3])
ggplot(data = prov) +
geom_sf() +
geom_sf(data = datos, aes(color=PRECTOTCORR),size = 1.2, alpha = 1) +
scale_color_gradientn(colours = rainbow(5,rev=T)) +
# scale_color_gradient(low="blue", high="red")+
ggtitle("Distribución espacial de PRECTOTCORR")
ggplot(data = prov) +
geom_sf() +
geom_sf(data = datos, aes(color=PRECTOTCORR,size=PRECTOTCORR), alpha = 1) +
scale_color_gradientn(colours = rainbow(5,rev=T)) +
# scale_color_gradient(low="blue", high="red")+
ggtitle("Distribución espacial de PRECTOTCORR")
datos %>%
st_drop_geometry() %>%
group_by(month(date,label=T),fire) %>%
summarize(AVG_PRECTOTCORR = mean(PRECTOTCORR),
Mes = `month(date, label = T)`) %>%
ggplot(aes(x=Mes,y=AVG_PRECTOTCORR,fill=fire)) +
geom_col(position="dodge",alpha=0.8)
ggplot(data = prov) +
geom_sf() +
geom_sf(data = datos, aes(color=NDVI),size = 1.2, alpha = 0.6) +
scale_color_gradientn(colours = rainbow(5,rev=T)) +
# scale_color_gradient(low="blue", high="red")+
ggtitle("Distribución espacial de NDVI")
datos %>%
st_drop_geometry() %>%
group_by(month(date,label=T),fire) %>%
summarize(AVG_NDVI = mean(NDVI),
Mes = `month(date, label = T)`) %>%
ggplot(aes(x=Mes,y=AVG_NDVI,fill=fire)) +
geom_col(position="dodge",alpha=0.8)
datos %>%
st_drop_geometry() %>%
group_by(month(date,label=T),fire) %>%
summarize(AVG_NDVI = mean(NDVI),
Mes = `month(date, label = T)`) %>%
ggplot(aes(x=Mes,y=AVG_NDVI,fill=fire)) +
geom_col(position="dodge",alpha=0.8) +
theme(axis.text.x = element_text(angle = 45, vjust = 0.5, hjust=0.5))
ggplot(data = prov) +
geom_sf() +
geom_sf(data = datos, aes(color=poblacion),size = 1.2, alpha = 0.6) +
scale_color_gradientn(colours = rainbow(5,rev=T)) +
# scale_color_gradient(low="blue", high="red")+
ggtitle("Distribución espacial de poblacion")
ggplot(data = prov) +
geom_sf() +
geom_sf(data = datos, aes(color=poblacion,size = poblacion), alpha = 0.6) +
scale_color_gradientn(colours = rainbow(5,rev=T)) +
# scale_color_gradient(low="blue", high="red")+
ggtitle("Distribución espacial de poblacion")
ggplot(data = prov) +
geom_sf() +
geom_sf(data = datos, aes(color=dens_poblacion, size= dens_poblacion), alpha = 0.6) +
scale_color_gradientn(colours = rainbow(5,rev=T)) +
# scale_color_gradient(low="blue", high="red")+
ggtitle("Distribución espacial de dens_poblacion")
ggplot(data = prov) +
geom_sf() +
geom_sf(data = datos, aes(color=poblacion,size = poblacion), alpha = 0.6) +
scale_color_gradientn(colours = rainbow(5,rev=T)) +
guides(fill="none")
ggplot(data = prov) +
geom_sf() +
geom_sf(data = datos, aes(color=poblacion,size = poblacion), alpha = 0.6) +
scale_color_gradientn(colours = rainbow(5,rev=T)) +
guides(size="none")
ggplot(data = prov) +
geom_sf() +
geom_sf(data = datos, aes(color=dens_poblacion, size= dens_poblacion), alpha = 0.6) +
scale_color_gradientn(colours = rainbow(5,rev=T)) +
guides(size="none") +
# scale_color_gradient(low="blue", high="red")+
ggtitle("Distribución espacial de dens_poblacion")
datos %>%
st_drop_geometry() %>%
group_by(month(date,label=T),fire) %>%
summarize(AVG_poblacion = mean(poblacion),
Mes = `month(date, label = T)`) %>%
ggplot(aes(x=Mes,y=AVG_poblacion,fill=fire)) +
geom_col(position="dodge",alpha=0.8)
ggplot(data = prov) +
geom_sf() +
geom_sf(data = datos, aes(color=dens_poblacion, size= dens_poblacion), alpha = 0.6) +
scale_color_gradientn(colours = rainbow(5,rev=T)) +
guides(size="none") +
# scale_color_gradient(low="blue", high="red")+
ggtitle("Distribución espacial de dens_poblacion")
datos_numeric = datos |> select(where(is.numeric)) %>% st_drop_geometry()
R = cor(datos_numeric)
corrplot(R,method = "ellipse",type = "upper")
summary(R-diag(diag(R)))
cor(datos_numeric,as.numeric(datos$fire))
summary(R-diag(diag(R)))
sample.int(nrow(datos),size=1)
datos[ind_sample,] |>
select(fire,where(is.numeric)) |>
ggparcoord(columns=2:19,alphaLines=0.1,groupColumn = "fire") +
xlab('') + ylab('') + scale_x_discrete(labels=colnames(datos_numeric)) +
ggtitle("Tipificación a normal estándar (por defecto)") +
theme(plot.title = element_text(size = 9),
axis.text.x = element_text(angle = 90))
ind_sample = sample.int(nrow(datos),size=100)
datos[ind_sample,] |>
select(fire,where(is.numeric)) |>
ggparcoord(columns=2:19,alphaLines=0.1,groupColumn = "fire") +
xlab('') + ylab('') + scale_x_discrete(labels=colnames(datos_numeric)) +
ggtitle("Tipificación a normal estándar (por defecto)") +
theme(plot.title = element_text(size = 9),
axis.text.x = element_text(angle = 90))
ind_sample = sample.int(nrow(datos),size=1000)
datos[ind_sample,] |>
select(fire,where(is.numeric)) |>
ggparcoord(columns=2:19,alphaLines=0.1,groupColumn = "fire") +
xlab('') + ylab('') + scale_x_discrete(labels=colnames(datos_numeric)) +
ggtitle("Tipificación a normal estándar (por defecto)") +
theme(plot.title = element_text(size = 9),
axis.text.x = element_text(angle = 90))
datos |>
select(fire,where(is.numeric)) |>
ggparcoord(columns=2:19,alphaLines=0.1,groupColumn = "fire") +
xlab('') + ylab('') + scale_x_discrete(labels=colnames(datos_numeric)) +
ggtitle("Tipificación a normal estándar (por defecto)") +
theme(plot.title = element_text(size = 9),
axis.text.x = element_text(angle = 90))
datos[ind_sample,] |>
select(fire,where(is.numeric)) |>
ggparcoord(columns=2:19,alphaLines=0.1,groupColumn = "fire") +
xlab('') + ylab('') + scale_x_discrete(labels=colnames(datos_numeric)) +
ggtitle("Tipificación a normal estándar (por defecto)") +
theme(plot.title = element_text(size = 9),
axis.text.x = element_text(angle = 90))+
guides(linetype = guide_legend(override.aes = list(size = 2)))
datos[ind_sample,] |>
select(fire,where(is.numeric)) |>
ggparcoord(columns=2:19,alphaLines=0.1,groupColumn = "fire") +
xlab('') + ylab('') + scale_x_discrete(labels=colnames(datos_numeric)) +
ggtitle("Tipificación a normal estándar (por defecto)") +
theme(plot.title = element_text(size = 9),
axis.text.x = element_text(angle = 90))+
guides(linetype = guide_legend(override.aes = list(alphaLines = 2)))
by(datos$PRECTOTCORR,datos$fire,summary)
datos |>
ggplot(aes(x=fire,y=PRECTOTCORR)) +
geom_boxplot()
boxplot(datos_numeric)
?boxplot
boxplots <- map(names(datos_numeric), ~ ggplot(datos, aes(x = fire, y = .data[[.x]])) +
geom_boxplot() +
labs(title = paste(.x, "~ fire")))
ggarrange(plotlist = boxplots,ncol=4,nrow=5)
ggarrange(plotlist = boxplots,ncol=6,nrow=3)
boxplots <- map(names(datos_numeric), ~ ggplot(datos, aes(x = fire, y = .data[[.x]],fill=fire)) +
geom_boxplot() +
guides(fill=FALSE)
labs(title = paste(.x, "~ fire")))
boxplots <- map(names(datos_numeric), ~ ggplot(datos, aes(x = fire, y = .data[[.x]],fill=fire)) +
geom_boxplot() +
guides(fill=FALSE) +
labs(title = paste(.x, "~ fire")))
boxplots <- map(names(datos_numeric), ~ ggplot(datos, aes(x = fire, y = .data[[.x]],fill=fire)) +
geom_boxplot() +
guides(fill="none") +
labs(title = paste(.x, "~ fire")))
ggarrange(plotlist = boxplots,ncol=6,nrow=3)
by(datos$PRECTOTCORR,datos$fire,summary)
by(datos$PRECTOTCORR,datos$fire,summary)
datos_categ <- datos |> select(WD10M,orientacion,enp,uso_suelo) %>% st_drop_geometry()
histogramas <- map(names(datos_categ), ~ ggplot(datos, aes(x = .data[[.x]], fill = fire)) +
geom_bar(position = "dodge", alpha = 0.8) +
labs(title = .x)+theme(axis.text.x = element_text(size=7)))
ggarrange(plotlist = histogramas, ncol = 2, nrow = ceiling(length(histogramas)/2))
# load("salidas_intermedias/dataset_completo2024-03-27.RData")
load("salidas_intermedias/dataset_strat_completo2024-04-26.RData")
summary(dataset$orientacion)
summary(dataset$WD10M)
table(datos$WD10M)
pca <- princomp(datos_numeric,cor=T)
summary(pca)
# Usamos model.matrix para trnasformar los factores usando variables dummies:
M = model.matrix(fire~.-1,data=datos |> st_drop_geometry() |> select(-c(date,municipio,cod_municipio)))
pca <- princomp(M,cor=T)
library(cluster)
clara<- clara(datos_numeric,2)
table(clara$clustering)
library(cluster)
clara<- clara(datos_numeric,2)
table(clara$clustering)
set.seed(12345)
# Probamos tipificando los datos:
clara = datos_numeric |>
scale() |>
clara(k=2)
table(clara$clustering)
t = table(clara$clustering,datos$fire)
t = rbind(t[2,],t[1,])
rownames(t) <- paste0("cluster_",c(1,2))
colnames(t) <- c("No fire","Fire")
t
prop.table(t,2)*100
sum(diag(t))/nrow(datos) # Proporción de observaciones "correctamente separada"
# Probamos tipificando los datos:
clara = M |>
scale() |>
clara(k=2)
table(clara$clustering)
t = table(clara$clustering,datos$fire)
rownames(t) <- paste0("cluster_",c(1,2))
colnames(t) <- c("No fire","Fire")
t
prop.table(t,2)*100
sum(diag(t))/nrow(datos) # Proporción de observaciones "correctamente separada"
sum(diag(t))/nrow(datos) # Proporción de observaciones "correctamente separada"
