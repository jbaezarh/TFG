ggplot(aes(x = metric, y = value, group = model_name)) +
geom_line(aes(col = model_name),size=1) +
geom_point(aes(col = model_name),size=2.3) +
scale_color_viridis_d(option="turbo") +
geom_vline(xintercept=1:5, linetype="dotted") +
labs(col = "Modelo", title = "Métricas sobre test") +
theme_minimal() +
theme(axis.line.x = element_line(color="black", size = 1),
axis.line.y = element_line(color="black", size = 1))
models %>% select(model_name,test_roc) %>% unnest(test_roc) %>%
ggplot(aes(x = 1 - specificity, y = sensitivity, col = model_name)) +
geom_path(lwd = 1, alpha = 0.7) +
geom_abline(lty = 3) +
coord_equal() +
labs(color="Modelo")+
# scale_color_viridis_d(option = "turbo",name="Modelo") +
theme_minimal() +
theme(axis.line.x = element_line(color="black", size = 1),
axis.line.y = element_line(color="black", size = 1))+
ggtitle("Curva ROC en test")
models %>% select(model_name,test_roc) %>% unnest(test_roc) %>%
ggplot(aes(x = 1 - specificity, y = sensitivity, col = model_name)) +
geom_path(lwd = 1, alpha = 0.7) +
geom_abline(lty = 3) +
coord_equal() +
scale_color_viridis_d(option="turbo") +
labs(color="Modelo")+
# scale_color_viridis_d(option = "turbo",name="Modelo") +
theme_minimal() +
theme(axis.line.x = element_line(color="black", size = 1),
axis.line.y = element_line(color="black", size = 1))+
ggtitle("Curva ROC en test")
# plot
test_metrics %>%
pivot_longer(cols = c(roc_auc, accuracy, recall, specificity, precision),
names_to = "metric") %>%
ggplot(aes(x = metric, y = value, group = model_name)) +
geom_line(aes(col = model_name),size=1) +
geom_point(aes(col = model_name),size=2.3) +
scale_color_viridis_d(option="turbo") +
geom_vline(xintercept=1:5, linetype="dotted") +
labs(col = "Modelo", title = "Métricas sobre test") +
theme_minimal() +
theme(axis.line.x = element_line(color="black", size = 1),
axis.line.y = element_line(color="black", size = 1))
models %>% select(model_name,test_roc) %>% unnest(test_roc) %>%
ggplot(aes(x = 1 - specificity, y = sensitivity, col = model_name)) +
geom_path(lwd = 1, alpha = 0.7) +
geom_abline(lty = 3) +
coord_equal() +
scale_color_viridis_d(option="turbo") +
labs(color="Modelo")+
# scale_color_viridis_d(option = "turbo",name="Modelo") +
theme_minimal() +
theme(axis.line.x = element_line(color="black", size = 1),
axis.line.y = element_line(color="black", size = 1))+
ggtitle("Curva ROC en test")
models %>% select(model_name,roc) %>% unnest(roc) %>%
ggplot(aes(x = 1 - specificity, y = sensitivity, col = model_name)) +
geom_path(lwd = 1, alpha = 0.7) +
geom_abline(lty = 3) +
coord_equal() +
scale_color_viridis_d(option="turbo") +
labs(color="Modelo")+
# scale_color_viridis_d(option = "turbo",name="Modelo") +
theme_minimal() +
theme(axis.line.x = element_line(color="black", size = 1),
axis.line.y = element_line(color="black", size = 1))+
ggtitle("Curva ROC en validación")
kable(test_metrics,digits=3)
load("salidas_intermedias/all_models.RData")
models = models %>% mutate(best_tuning = map(models_tune,function(x) select_best(x,metric = "accuracy")),
best_metrics = map2(models_tune,
best_tuning,
~ collect_predictions(.x,parameters = .y) %>%
get_metrics() %>%
extract2(1)), # Para extraer solo las medidas y no la matriz de confusión
roc = map2(models_tune,
best_tuning,
~ collect_predictions(.x,parameters = .y) %>%
roc_curve(fire, .pred_0))
)
metrics = models %>% select(model_name,best_metrics) %>% unnest(best_metrics)
metrics
# curva roc
metrics %>%
pivot_longer(cols = c(roc_auc, accuracy, recall, specificity, precision),
names_to = "metric") %>%
ggplot(aes(x = metric, y = value, group = model_name)) +
geom_line(aes(col = model_name),size=1) +
geom_point(aes(col = model_name),size=2.3) +
scale_color_viridis_d(option="turbo") +
geom_vline(xintercept=1:5, linetype="dotted") +
labs(col = "Modelo", title = "Métricas sobre validación") +
theme_minimal() +
theme(axis.line.x = element_line(color="black", size = 1),
axis.line.y = element_line(color="black", size = 1))
# plot medidas
models %>% select(model_name,roc) %>% unnest(roc) %>%
ggplot(aes(x = 1 - specificity, y = sensitivity, col = model_name)) +
geom_path(lwd = 1, alpha = 0.7) +
geom_abline(lty = 3) +
coord_equal() +
scale_color_viridis_d(option="turbo") +
labs(color="Modelo")+
# scale_color_viridis_d(option = "turbo",name="Modelo") +
theme_minimal() +
theme(axis.line.x = element_line(color="black", size = 1),
axis.line.y = element_line(color="black", size = 1))+
ggtitle("Curva ROC en validación")
cores = 8
set.seed(345)
models <- models %>% mutate(final_workflow = map2(models_workflow,best_tuning,finalize_workflow),
last_fit = map(final_workflow,function(x) last_fit(x,splits,add_validation_set=T)))
save(models, file="salidas_intermedias/all_models_test.RData")
models = models %>% mutate(test_metrics = map(last_fit,
~collect_predictions(.x) %>%
get_metrics() %>%
extract2(1)), # Para extraer solo las medidas
test_roc = map(last_fit,
~collect_predictions(.x) %>%
roc_curve(fire, .pred_0))
)
save(models, file="salidas_intermedias/all_models_test.RData")
test_metrics = models %>% select(model_name,test_metrics) %>% unnest(test_metrics)
test_metrics
# plot
test_metrics %>%
pivot_longer(cols = c(roc_auc, accuracy, recall, specificity, precision),
names_to = "metric") %>%
ggplot(aes(x = metric, y = value, group = model_name)) +
geom_line(aes(col = model_name),size=1) +
geom_point(aes(col = model_name),size=2.3) +
scale_color_viridis_d(option="turbo") +
geom_vline(xintercept=1:5, linetype="dotted") +
labs(col = "Modelo", title = "Métricas sobre test") +
theme_minimal() +
theme(axis.line.x = element_line(color="black", size = 1),
axis.line.y = element_line(color="black", size = 1))
models %>% select(model_name,test_roc) %>% unnest(test_roc) %>%
ggplot(aes(x = 1 - specificity, y = sensitivity, col = model_name)) +
geom_path(lwd = 1, alpha = 0.7) +
geom_abline(lty = 3) +
coord_equal() +
scale_color_viridis_d(option="turbo") +
labs(color="Modelo")+
# scale_color_viridis_d(option = "turbo",name="Modelo") +
theme_minimal() +
theme(axis.line.x = element_line(color="black", size = 1),
axis.line.y = element_line(color="black", size = 1))+
ggtitle("Curva ROC en test")
library(knitr)
kable(test_metrics,digits=3)
# plot
test_metrics %>%
pivot_longer(cols = c(roc_auc, accuracy, recall, specificity, precision),
names_to = "metric") %>%
ggplot(aes(x = metric, y = value, group = model_name)) +
geom_line(aes(col = model_name),size=1) +
geom_point(aes(col = model_name),size=2.3) +
scale_color_viridis_d(option="turbo") +
geom_vline(xintercept=1:5, linetype="dotted") +
labs(col = "Modelo", title = "Métricas sobre test") +
theme_minimal() +
theme(axis.line.x = element_line(color="black", size = 1),
axis.line.y = element_line(color="black", size = 1))
models %>% select(model_name,test_roc) %>% unnest(test_roc) %>%
ggplot(aes(x = 1 - specificity, y = sensitivity, col = model_name)) +
geom_path(lwd = 1, alpha = 0.7) +
geom_abline(lty = 3) +
coord_equal() +
scale_color_viridis_d(option="turbo") +
labs(color="Modelo")+
# scale_color_viridis_d(option = "turbo",name="Modelo") +
theme_minimal() +
theme(axis.line.x = element_line(color="black", size = 1),
axis.line.y = element_line(color="black", size = 1))+
ggtitle("Curva ROC en test")
kable(test_metrics,digits=3)
test
validation
validation_set
val_set
validation(val_set)
validation(splits)
str(training)
validation(splits) %>% str()
models %>% filter(model_name=="lr")
models %>% pluck(model_name=="lr",final_workflow)
models %>% pluck(final_workflow,lr)
?plucl
?pluck7
?pluck
models %>% filter(model_name=="lr") %>% extract(last_fit)
models %>% filter(model_name=="lr") %>% pull(last_fit)
models %>% filter(model_name=="lr") %>% pull(last_fit) %>% extract_fit_engine()
models %>% filter(model_name=="lr") %>% extract("last_fit") #%>% extract_fit_engine()
models %>% filter(model_name=="lr") %>% extract("last_fit") %>% extract_fit_engine()
models %>%
filter(model_name=="lr") %>%
extract("last_fit") %>%
extract_fit_parsnip()
models %>%
filter(model_name=="lr") %>%
extract("last_fit") %>%
coef()
models %>%
filter(model_name=="lr") %>%
extract("last_fit") %>%
pull_workflow_fit() %>%
tidy()
models %>%
filter(model_name=="lr") %>%
last_fit(splits,add_validation = T)
models %>%
filter(model_name=="lr") %>%
extract("last_workflow") %>%
last_fit(splits,add_validation = T)
models %>%
filter(model_name=="lr") %>%
extract("final_workflow") %>%
last_fit(splits,add_validation = T)
models %>%
filter(model_name=="lr") %>%
extract("final_workflow") %>%
models %>%
filter(model_name=="lr") %>%
extract("final_workflow")
models %>%
filter(model_name=="lr") %>%
extract("final_workflow") %>%
last_fit(splits,add_validation = T)
models %>%
filter(model_name=="lr") %>%
extract("final_workflow") %>%
~last_fit(.,splits,add_validation = T)
models %>%
filter(model_name=="lr") %>%
extract("final_workflow") %>%
~last_fit(.,splits,add_validation = T)
models %>%
filter(model_name=="lr") %>%
extract("final_workflow") %>%
~last_fit(.x,splits,add_validation = T)
models %>%
filter(model_name=="lr") %>%
extract("final_workflow") %>%
function(x) last_fit(x,splits,add_validation = T)
?fit
models %>%
filter(model_name=="lr") %>%
extract("final_workflow") %>%
fit(train) %>%
extract_fit_parsnip()
models %>%
filter(model_name=="lr") %>%
extract("final_workflow") %>%
fit(train)
models %>%
filter(model_name=="lr") %>%
pull(final_workflow)
models %>%
filter(model_name=="lr") %>%
pull(final_workflow) %>%
fit(train) %>%
models %>%
filter(model_name=="lr") %>%
pull(final_workflow) %>%
fit(train) %>%
extract_fit_parsnip()
models %>%
filter(model_name=="lr") %>%
pull(final_workflow) %>%
fit(training) %>%
extract_fit_parsnip()
models %>%
filter(model_name=="lr") %>%
pull(final_workflow)
last_lr_workflow = models %>%
filter(model_name=="lr") %>%
pull(final_workflow)
models7
models
models %>% filter(model_name=="lr") %>% select(final_workflow) %>% unnest()
models %>% filter(model_name=="lr") %>% select(final_workflow)
models %>% filter(model_name=="lr") %>% select(final_workflow) %>% .[[1]]
models %>% filter(model_name=="lr") %>% select(final_workflow) %>% .[[1]] %>% fit(training) %>% extract_fit_parsnip()
models %>% filter(model_name=="lr") %>% select(final_workflow) %>% .[[1]] %>% fit(training)
a = models %>% filter(model_name=="lr") %>% select(final_workflow) %>% .[[1]]
a[[1]]
a = a[[1]]
a %>% fit(training) %>% extract_fit_parsnip()
a %>% fit(training) %>% extract_fit_parsnip() %>% tidy()
a %>% fit(training) %>% extract_fit_parsnip() %>% tidy() %>% print(n=100)
?`fit,onlearn-method`
?fit
library(tidyverse)
library(tidymodels)
library(sf)
library(ggplot2)
library(terra)
library(mapSpain)
load("salidas_intermedias/datos_strat_depurados_geom_2024-04-27.RData") # Datos
datos <- datos |>
mutate(uso_suelo = fct_lump(uso_suelo,
n = 7, # nos quedamos con los 7 niveles del factor más frecuentes (clases 2 y 3)
other_level= "Otro"))
table(datos$uso_suelo)
# load("salidas_intermedias/trained_models_strat_2024_04_28.RData") # Modelos
load("Private/all_models_test.RData")
incendios21 <- st_read(paste0("./data_raw/incendios_2000-2022/incendios_",2021,".shp")) %>%
st_transform(st_crs(datos)) %>%
mutate(FECHA_INIC=ymd(FECHA_INIC))
incendio_estudio <- incendios21 %>% filter(month(FECHA_INIC)==9)
and <- esp_get_ccaa(ccaa = "Andalucía") %>% st_transform(st_crs(datos))
g = and %>%
ggplot() +
geom_sf() +
geom_sf(data = incendio_estudio, fill=alpha("black",0))
g
# grid de puntos 10km x 10km de andalucía
grid = st_make_grid(and,
cellsize = c(50000,50000),
what = "centers")[and]
g + geom_sf(data = grid)
# grid de puntos 10km x 10km de andalucía
grid = st_make_grid(and,
cellsize = c(25000,25000),
what = "centers")[and]
# grid de puntos 10km x 10km de andalucía
grid = st_make_grid(and,
cellsize = c(25000,25000), # 10000
what = "centers")[and]
g + geom_sf(data = grid)
load("salidas_intermedias/datos_strat_depurados_geom_2024-04-27.RData") # Datos
datos <- datos |>
mutate(uso_suelo = fct_lump(uso_suelo,
n = 7, # nos quedamos con los 7 niveles del factor más frecuentes (clases 2 y 3)
other_level= "Otro"))
table(datos$uso_suelo)
incendios21 <- st_read(paste0("./data_raw/incendios_2000-2022/incendios_",2021,".shp")) %>%
st_transform(st_crs(datos)) %>%
mutate(FECHA_INIC=ymd(FECHA_INIC))
incendio_estudio <- incendios21 %>% filter(month(FECHA_INIC)==9)
library(tidyverse)
library(tidymodels)
library(sf)
library(ggplot2)
library(terra)
library(mapSpain)
incendios21 <- st_read(paste0("./data_raw/incendios_2000-2022/incendios_",2021,".shp")) %>%
st_transform(st_crs(datos)) %>%
mutate(FECHA_INIC=ymd(FECHA_INIC))
incendio_estudio <- incendios21 %>% filter(month(FECHA_INIC)==9)
and <- esp_get_ccaa(ccaa = "Andalucía") %>% st_transform(st_crs(datos))
and <- esp_get_ccaa(ccaa = "Andalucía") %>% st_transform(st_crs(datos))
g = and %>%
ggplot() +
geom_sf() +
geom_sf(data = incendio_estudio, fill=alpha("black",0))
g
# grid de puntos 10km x 10km de andalucía
grid = st_make_grid(and,
cellsize = c(25000,25000), # 10000
what = "centers")[and]
g + geom_sf(data = grid)
sample = st_sf(tibble(date = rep(incendio_estudio$FECHA_INIC,length(grid)),geometry = grid) %>% # el día del incendio
bind_rows(tibble(date = rep(incendio_estudio$FECHA_INIC+15,length(grid)),geometry = grid)) %>%  # 15 días después
bind_rows(tibble(date = rep(incendio_estudio$FECHA_INIC+15,length(grid)),geometry = grid)) %>%  # el mes después
bind_rows(tibble(date = rep(incendio_estudio$FECHA_INIC-15,length(grid)),geometry = grid)) %>%  # 15 días antes
bind_rows(tibble(date = rep(incendio_estudio$FECHA_INIC-30,length(grid)),geometry = grid))) # el mes antes
source("scripts/strat/fun_asignar_variables.R")
full_grid  = asignar_variables(sample)
# Más detalle
# grid de puntos 10km x 10km de andalucía
grid = st_make_grid(st_buffer(incendio_estudio,dist=10000),
cellsize = c(1000,1000),
what = "centers")[and]
# ----------
g + geom_sf(data = grid)
sample = st_sf(tibble(date = rep(incendio_estudio$FECHA_INIC,length(grid)),geometry = grid))
g + geom_sf(data = pred, mapping = aes(color=.pred_class))
bbox = st_bbox(st_buffer(incendio_estudio,dist=10000)) %>%  as.matrix() %>% t() %>% as.data.frame()
g +
geom_sf(data = pred, mapping = aes(color=.pred_class)) +
#scale_color_gradientn(colours = rainbow(5,rev=T))  +
geom_sf(data=incendio_estudio,fill = alpha("black",0)) +
coord_sf(xlim=c(bbox$xmin,bbox$xmax),ylim=c(bbox$ymin,bbox$ymax))
load("salidas_intermedias/full_grid_meses_2022_processed.RData")
library(tidyverse)
library(tidymodels)
library(sf)
library(ggplot2)
library(terra)
library(mapSpain)
library(skimr)
# load("salidas_intermedias/trained_models_strat_2024_04_28.RData") # Modelos
load("Private/all_models_test.RData")
lr_final <- models %>% filter(model_name=="lr")
rm(models) # Es un archivo muy pesado, lo eliminamos de la memoria
pred_class = last_lr_fit %>% extract_workflow() %>% predict(new_data = full_grid)
pred_class = lr_final$last_fit %>% extract_workflow() %>% predict(new_data = full_grid)
lr_final$last_fit
lr_final %>% pull(last_fit)
lr_final %>% pull(last_fit) %>% unnest()
lr_final %>% unnest(last_fit) %>% pull(last_fit)
lr_final %>% unnest(last_fit)
lr_final %>% select(last_fit) %>% unnest()
lr_final %>% pull(last_fit)
lr_final %>% pull(last_fit) %>% .[[1]]
lr_final %>% pull(last_fit) %>% pull(1)
pred_class = lr_final %>% pull(last_fit) %>% .[[1]] %>% extract_workflow() %>% predict(new_data = full_grid)
pred_probs = lr_final %>% pull(last_fit) %>% .[[1]] %>% extract_workflow() %>% predict(new_data = full_grid,type="prob")
pred = cbind(full_grid,pred_class,pred_probs)
pred_class
pred
g = and %>%
ggplot() +
geom_sf() +
theme_minimal()
and <- esp_get_ccaa(ccaa = "Andalucía") %>% st_transform(st_crs(datos))
and <- esp_get_ccaa(ccaa = "Andalucía") %>% st_transform(st_crs(full_grid))
pred %>%
ggplot() +
geom_sf(data = and)
pred %>%
ggplot() +
geom_sf(data = and) +
theme_minimal() +
geom_sf(aes(col=pred$.pred_1))
ggplot(data = and) +
geom_sf() +
geom_sf(data = pred, aes(color=.pred_1, alpha = .pred_0),size = 1.2) +
facet_wrap(~month(date,label=TRUE)) +
scale_color_gradientn(colours = rainbow(5,rev=T)) +
# scale_color_gradient(low="blue", high="red")+
ggtitle("Title") +
labs(alpha = "none") +
theme_minimal() +
theme(axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
ggplot(data = and) +
geom_sf() +
geom_sf(data = pred, aes(color=.pred_1, alpha = .pred_0),size = 1.5) +
facet_wrap(~month(date,label=TRUE)) +
scale_color_gradientn(colours = rainbow(5,rev=T)) +
# scale_color_gradient(low="blue", high="red")+
ggtitle("Title") +
labs(alpha = "none") +
theme_minimal() +
theme(axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
incendios22 <- st_read(paste0("./data_raw/incendios_2000-2022/incendios_",2022,".shp")) %>%
st_transform(st_crs(full_grid)) %>%
mutate(FECHA_INIC=ymd(FECHA_INIC))
incendios22 <- st_read(paste0("./data_raw/incendios_2000-2022/incendios_",2022,".shp")) %>%
st_transform(st_crs(full_grid)) #%>%
incendios22
mutate(FECHA_INIC=ymd(matches("^FECHA_INIC$|^fecha_inic$")))
mutate(FECHA_INIC=ymd(fecha_inic))
incendios22 <- st_read(paste0("./data_raw/incendios_2000-2022/incendios_",2022,".shp")) %>%
st_transform(st_crs(full_grid))
incendios22
names(incendios22)
incendios22 <- st_read(paste0("./data_raw/incendios_2000-2022/incendios_",2022,".shp")) %>%
st_transform(st_crs(full_grid)) %>%
mutate(FECHA_INIC=ymd(fecha_inic))
g <- ggplot(data = and) +
geom_sf() +
geom_sf(data = pred, aes(color=.pred_1, alpha = .pred_0),size = 1.5) +
facet_wrap(~month(date,label=TRUE)) +
scale_color_gradientn(colours = rainbow(5,rev=T)) +
# scale_color_gradient(low="blue", high="red")+
ggtitle("Title") +
labs(alpha = "none") +
theme_minimal() +
theme(axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
g
incendios22 <- st_read(paste0("./data_raw/incendios_2000-2022/incendios_",2022,".shp")) %>%
st_transform(st_crs(full_grid)) %>%
mutate(date=ymd(fecha_inic))
g +
geom_sf(data = incendios22)
g +
geom_sf(data = incendios22, color = "red",fill="transparent")
g +
geom_sf(data = incendios22, color = "red",fill="transparent") +
geom_sf(data = incendios22, color = "red",fill="transparent") +
st_buffer(incendios22,dist=1000)
st_buffer(incendios22,dist=1000)
g +
geom_sf(data = incendios22, color = "red",fill="transparent") +
geom_sf(data = st_buffer(incendios22,dist=5000), color = "firebrick",fill="transparent",linetype="dashed")
g +
geom_sf(data = incendios22, color = "red",fill="transparent") +
geom_sf(data = st_buffer(incendios22,dist=5000), color = "firebrick",fill="transparent",linetype="dotted")
g +
geom_sf(data = incendios22, color = "red",fill="transparent") +
geom_sf(data = st_buffer(incendios22,dist=5000), color = "firebrick",fill="firebrick",alpha=0.2,linetype="dotted")
